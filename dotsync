#!/usr/bin/env python3
import os
import sys
import json
import shutil
import subprocess

BASE_DIR = os.path.expanduser("~/.dotsync")
SYNC_DIR = os.path.join(BASE_DIR, "sync")
CONFIG_FILE = os.path.join(BASE_DIR, "config.json")

def run(cmd, cwd=None):
    return subprocess.run(cmd, cwd=cwd, text=True, capture_output=True)

def load_config():
    if not os.path.exists(CONFIG_FILE):
        return {"files": []}
    with open(CONFIG_FILE, "r") as f:
        return json.load(f)

def save_config(cfg):
    with open(CONFIG_FILE, "w") as f:
        json.dump(cfg, f, indent=4)

def ensure_dirs():
    os.makedirs(SYNC_DIR, exist_ok=True)

def init_repo(repo_link):
    ensure_dirs()  # stellt sicher, dass BASE_DIR und SYNC_DIR existieren

    # Prüfen, ob sync/ leer ist
    if os.listdir(SYNC_DIR):
        print(f"{SYNC_DIR} ist nicht leer. Bitte leere das Verzeichnis oder verschiebe alte Dateien.")
        sys.exit(1)

    print(f"Klone Repository von {repo_link} in {SYNC_DIR} ...")
    res = run(["git", "clone", repo_link, SYNC_DIR])
    if res.returncode != 0:
        print("Fehler beim Klonen:", res.stderr)
        sys.exit(1)

    # Stelle sicher, dass config.json existiert
    if not os.path.exists(CONFIG_FILE):
        save_config({"files": []})

    print("Repository erfolgreich eingerichtet!")
    print("Verwende jetzt: dotsync add, push, pull")

def add_file(filename):
    path = os.path.expanduser(filename)
    if not os.path.exists(path):
        print(f"Datei {path} existiert nicht.")
        sys.exit(1)
    cfg = load_config()
    if filename not in cfg["files"]:
        cfg["files"].append(filename)
        save_config(cfg)
        print(f"Datei {filename} zur Sync-Liste hinzugefügt.")
    else:
        print(f"Datei {filename} ist bereits in der Liste.")

def push_files():
    cfg = load_config()
    if not cfg["files"]:
        print("Keine Dateien in der Sync-Liste. Füge welche mit `dotsync add <file>` hinzu.")
        return
    ensure_dirs()

    print("Kopiere Dateien ins Sync-Verzeichnis...")
    for f in cfg["files"]:
        src = os.path.expanduser(f)
        if os.path.exists(src):
            dest = os.path.join(SYNC_DIR, os.path.basename(f))
            shutil.copy2(src, dest)
            print(f"{src} → {dest}")
        else:
            print(f"{f} existiert nicht, übersprungen.")

    print("Lade Änderungen hoch...")
    run(["git", "add", "-A"], cwd=BASE_DIR)
    run(["git", "commit", "-m", "dotsync auto-push"], cwd=BASE_DIR)
    result = run(["git", "push"], cwd=BASE_DIR)
    print(result.stdout or "Fertig!")

def pull_files():
    ensure_dirs()
    print("Lade Änderungen vom Remote...")
    result = run(["git", "pull", "--rebase"], cwd=BASE_DIR)
    print(result.stdout or "Aktualisiert.")

    cfg = load_config()
    if not cfg["files"]:
        print("Keine Dateien in der Sync-Liste.")
        return

    print("Kopiere Dateien ins Home-Verzeichnis...")
    for f in cfg["files"]:
        src = os.path.join(SYNC_DIR, os.path.basename(f))
        dest = os.path.expanduser(f)
        if os.path.exists(src):
            shutil.copy2(src, dest)
            print(f"{src} → {dest}")
        else:
            print(f"{src} nicht im Repo, übersprungen.")

def main():
    if len(sys.argv) < 2:
        print("Usage: dotsync <init|add|push|pull> [filename|repo-link]")
        sys.exit(1)

    cmd = sys.argv[1]

    if cmd == "init":
        if len(sys.argv) < 3:
            print("Bitte GitHub-Link angeben (z. B. dotsync init https://github.com/user/dotfiles.git)")
            sys.exit(1)
        init_repo(sys.argv[2])
    elif cmd == "add":
        if len(sys.argv) < 3:
            print("Bitte Datei angeben.")
            sys.exit(1)
        add_file(sys.argv[2])
    elif cmd == "push":
        push_files()
    elif cmd == "pull":
        pull_files()
    else:
        print("Unbekannter Befehl. Nutze: init, add, push, pull.")

if __name__ == "__main__":
    main()
